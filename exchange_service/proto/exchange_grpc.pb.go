// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: exchange.proto

package exchangepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExchangeService_CreateOffer_FullMethodName        = "/exchange.ExchangeService/CreateOffer"
	ExchangeService_GetOffer_FullMethodName           = "/exchange.ExchangeService/GetOffer"
	ExchangeService_ListOffersByUser_FullMethodName   = "/exchange.ExchangeService/ListOffersByUser"
	ExchangeService_ListPendingOffers_FullMethodName  = "/exchange.ExchangeService/ListPendingOffers"
	ExchangeService_AcceptOffer_FullMethodName        = "/exchange.ExchangeService/AcceptOffer"
	ExchangeService_DeclineOffer_FullMethodName       = "/exchange.ExchangeService/DeclineOffer"
	ExchangeService_DeleteOffer_FullMethodName        = "/exchange.ExchangeService/DeleteOffer"
	ExchangeService_UpdateOffer_FullMethodName        = "/exchange.ExchangeService/UpdateOffer"
	ExchangeService_AddOfferedBook_FullMethodName     = "/exchange.ExchangeService/AddOfferedBook"
	ExchangeService_RemoveOfferedBook_FullMethodName  = "/exchange.ExchangeService/RemoveOfferedBook"
	ExchangeService_ListAllOffers_FullMethodName      = "/exchange.ExchangeService/ListAllOffers"
	ExchangeService_ListOffersByStatus_FullMethodName = "/exchange.ExchangeService/ListOffersByStatus"
)

// ExchangeServiceClient is the client API for ExchangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeServiceClient interface {
	CreateOffer(ctx context.Context, in *CreateOfferRequest, opts ...grpc.CallOption) (*OfferResponse, error)
	GetOffer(ctx context.Context, in *OfferID, opts ...grpc.CallOption) (*OfferResponse, error)
	ListOffersByUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*OfferList, error)
	ListPendingOffers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OfferList, error)
	AcceptOffer(ctx context.Context, in *AcceptOfferRequest, opts ...grpc.CallOption) (*OfferResponse, error)
	DeclineOffer(ctx context.Context, in *OfferID, opts ...grpc.CallOption) (*OfferResponse, error)
	DeleteOffer(ctx context.Context, in *OfferID, opts ...grpc.CallOption) (*Empty, error)
	UpdateOffer(ctx context.Context, in *UpdateOfferRequest, opts ...grpc.CallOption) (*OfferResponse, error)
	AddOfferedBook(ctx context.Context, in *BookOpRequest, opts ...grpc.CallOption) (*OfferResponse, error)
	RemoveOfferedBook(ctx context.Context, in *BookOpRequest, opts ...grpc.CallOption) (*OfferResponse, error)
	ListAllOffers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OfferList, error)
	ListOffersByStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*OfferList, error)
}

type exchangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeServiceClient(cc grpc.ClientConnInterface) ExchangeServiceClient {
	return &exchangeServiceClient{cc}
}

func (c *exchangeServiceClient) CreateOffer(ctx context.Context, in *CreateOfferRequest, opts ...grpc.CallOption) (*OfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferResponse)
	err := c.cc.Invoke(ctx, ExchangeService_CreateOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) GetOffer(ctx context.Context, in *OfferID, opts ...grpc.CallOption) (*OfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferResponse)
	err := c.cc.Invoke(ctx, ExchangeService_GetOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) ListOffersByUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*OfferList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferList)
	err := c.cc.Invoke(ctx, ExchangeService_ListOffersByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) ListPendingOffers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OfferList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferList)
	err := c.cc.Invoke(ctx, ExchangeService_ListPendingOffers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) AcceptOffer(ctx context.Context, in *AcceptOfferRequest, opts ...grpc.CallOption) (*OfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferResponse)
	err := c.cc.Invoke(ctx, ExchangeService_AcceptOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) DeclineOffer(ctx context.Context, in *OfferID, opts ...grpc.CallOption) (*OfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferResponse)
	err := c.cc.Invoke(ctx, ExchangeService_DeclineOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) DeleteOffer(ctx context.Context, in *OfferID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ExchangeService_DeleteOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) UpdateOffer(ctx context.Context, in *UpdateOfferRequest, opts ...grpc.CallOption) (*OfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferResponse)
	err := c.cc.Invoke(ctx, ExchangeService_UpdateOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) AddOfferedBook(ctx context.Context, in *BookOpRequest, opts ...grpc.CallOption) (*OfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferResponse)
	err := c.cc.Invoke(ctx, ExchangeService_AddOfferedBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) RemoveOfferedBook(ctx context.Context, in *BookOpRequest, opts ...grpc.CallOption) (*OfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferResponse)
	err := c.cc.Invoke(ctx, ExchangeService_RemoveOfferedBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) ListAllOffers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OfferList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferList)
	err := c.cc.Invoke(ctx, ExchangeService_ListAllOffers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) ListOffersByStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*OfferList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferList)
	err := c.cc.Invoke(ctx, ExchangeService_ListOffersByStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeServiceServer is the server API for ExchangeService service.
// All implementations must embed UnimplementedExchangeServiceServer
// for forward compatibility.
type ExchangeServiceServer interface {
	CreateOffer(context.Context, *CreateOfferRequest) (*OfferResponse, error)
	GetOffer(context.Context, *OfferID) (*OfferResponse, error)
	ListOffersByUser(context.Context, *UserID) (*OfferList, error)
	ListPendingOffers(context.Context, *Empty) (*OfferList, error)
	AcceptOffer(context.Context, *AcceptOfferRequest) (*OfferResponse, error)
	DeclineOffer(context.Context, *OfferID) (*OfferResponse, error)
	DeleteOffer(context.Context, *OfferID) (*Empty, error)
	UpdateOffer(context.Context, *UpdateOfferRequest) (*OfferResponse, error)
	AddOfferedBook(context.Context, *BookOpRequest) (*OfferResponse, error)
	RemoveOfferedBook(context.Context, *BookOpRequest) (*OfferResponse, error)
	ListAllOffers(context.Context, *Empty) (*OfferList, error)
	ListOffersByStatus(context.Context, *StatusRequest) (*OfferList, error)
	mustEmbedUnimplementedExchangeServiceServer()
}

// UnimplementedExchangeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExchangeServiceServer struct{}

func (UnimplementedExchangeServiceServer) CreateOffer(context.Context, *CreateOfferRequest) (*OfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOffer not implemented")
}
func (UnimplementedExchangeServiceServer) GetOffer(context.Context, *OfferID) (*OfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffer not implemented")
}
func (UnimplementedExchangeServiceServer) ListOffersByUser(context.Context, *UserID) (*OfferList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOffersByUser not implemented")
}
func (UnimplementedExchangeServiceServer) ListPendingOffers(context.Context, *Empty) (*OfferList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingOffers not implemented")
}
func (UnimplementedExchangeServiceServer) AcceptOffer(context.Context, *AcceptOfferRequest) (*OfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOffer not implemented")
}
func (UnimplementedExchangeServiceServer) DeclineOffer(context.Context, *OfferID) (*OfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineOffer not implemented")
}
func (UnimplementedExchangeServiceServer) DeleteOffer(context.Context, *OfferID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOffer not implemented")
}
func (UnimplementedExchangeServiceServer) UpdateOffer(context.Context, *UpdateOfferRequest) (*OfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOffer not implemented")
}
func (UnimplementedExchangeServiceServer) AddOfferedBook(context.Context, *BookOpRequest) (*OfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOfferedBook not implemented")
}
func (UnimplementedExchangeServiceServer) RemoveOfferedBook(context.Context, *BookOpRequest) (*OfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOfferedBook not implemented")
}
func (UnimplementedExchangeServiceServer) ListAllOffers(context.Context, *Empty) (*OfferList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllOffers not implemented")
}
func (UnimplementedExchangeServiceServer) ListOffersByStatus(context.Context, *StatusRequest) (*OfferList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOffersByStatus not implemented")
}
func (UnimplementedExchangeServiceServer) mustEmbedUnimplementedExchangeServiceServer() {}
func (UnimplementedExchangeServiceServer) testEmbeddedByValue()                         {}

// UnsafeExchangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeServiceServer will
// result in compilation errors.
type UnsafeExchangeServiceServer interface {
	mustEmbedUnimplementedExchangeServiceServer()
}

func RegisterExchangeServiceServer(s grpc.ServiceRegistrar, srv ExchangeServiceServer) {
	// If the following call pancis, it indicates UnimplementedExchangeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExchangeService_ServiceDesc, srv)
}

func _ExchangeService_CreateOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).CreateOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_CreateOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).CreateOffer(ctx, req.(*CreateOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_GetOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).GetOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_GetOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).GetOffer(ctx, req.(*OfferID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_ListOffersByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).ListOffersByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_ListOffersByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).ListOffersByUser(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_ListPendingOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).ListPendingOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_ListPendingOffers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).ListPendingOffers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_AcceptOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).AcceptOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_AcceptOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).AcceptOffer(ctx, req.(*AcceptOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_DeclineOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).DeclineOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_DeclineOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).DeclineOffer(ctx, req.(*OfferID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_DeleteOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).DeleteOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_DeleteOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).DeleteOffer(ctx, req.(*OfferID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_UpdateOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).UpdateOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_UpdateOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).UpdateOffer(ctx, req.(*UpdateOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_AddOfferedBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).AddOfferedBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_AddOfferedBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).AddOfferedBook(ctx, req.(*BookOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_RemoveOfferedBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).RemoveOfferedBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_RemoveOfferedBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).RemoveOfferedBook(ctx, req.(*BookOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_ListAllOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).ListAllOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_ListAllOffers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).ListAllOffers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_ListOffersByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).ListOffersByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_ListOffersByStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).ListOffersByStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExchangeService_ServiceDesc is the grpc.ServiceDesc for ExchangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchange.ExchangeService",
	HandlerType: (*ExchangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOffer",
			Handler:    _ExchangeService_CreateOffer_Handler,
		},
		{
			MethodName: "GetOffer",
			Handler:    _ExchangeService_GetOffer_Handler,
		},
		{
			MethodName: "ListOffersByUser",
			Handler:    _ExchangeService_ListOffersByUser_Handler,
		},
		{
			MethodName: "ListPendingOffers",
			Handler:    _ExchangeService_ListPendingOffers_Handler,
		},
		{
			MethodName: "AcceptOffer",
			Handler:    _ExchangeService_AcceptOffer_Handler,
		},
		{
			MethodName: "DeclineOffer",
			Handler:    _ExchangeService_DeclineOffer_Handler,
		},
		{
			MethodName: "DeleteOffer",
			Handler:    _ExchangeService_DeleteOffer_Handler,
		},
		{
			MethodName: "UpdateOffer",
			Handler:    _ExchangeService_UpdateOffer_Handler,
		},
		{
			MethodName: "AddOfferedBook",
			Handler:    _ExchangeService_AddOfferedBook_Handler,
		},
		{
			MethodName: "RemoveOfferedBook",
			Handler:    _ExchangeService_RemoveOfferedBook_Handler,
		},
		{
			MethodName: "ListAllOffers",
			Handler:    _ExchangeService_ListAllOffers_Handler,
		},
		{
			MethodName: "ListOffersByStatus",
			Handler:    _ExchangeService_ListOffersByStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exchange.proto",
}
