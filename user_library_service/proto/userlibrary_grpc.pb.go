// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: userlibrary.proto

package userlibrarypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserLibraryService_AssignBook_FullMethodName    = "/userlibrary.UserLibraryService/AssignBook"
	UserLibraryService_UnassignBook_FullMethodName  = "/userlibrary.UserLibraryService/UnassignBook"
	UserLibraryService_ListUserBooks_FullMethodName = "/userlibrary.UserLibraryService/ListUserBooks"
)

// UserLibraryServiceClient is the client API for UserLibraryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис
type UserLibraryServiceClient interface {
	AssignBook(ctx context.Context, in *AssignBookRequest, opts ...grpc.CallOption) (*AssignBookResponse, error)
	UnassignBook(ctx context.Context, in *UnassignBookRequest, opts ...grpc.CallOption) (*UnassignBookResponse, error)
	ListUserBooks(ctx context.Context, in *ListUserBooksRequest, opts ...grpc.CallOption) (*ListUserBooksResponse, error)
}

type userLibraryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserLibraryServiceClient(cc grpc.ClientConnInterface) UserLibraryServiceClient {
	return &userLibraryServiceClient{cc}
}

func (c *userLibraryServiceClient) AssignBook(ctx context.Context, in *AssignBookRequest, opts ...grpc.CallOption) (*AssignBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignBookResponse)
	err := c.cc.Invoke(ctx, UserLibraryService_AssignBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLibraryServiceClient) UnassignBook(ctx context.Context, in *UnassignBookRequest, opts ...grpc.CallOption) (*UnassignBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnassignBookResponse)
	err := c.cc.Invoke(ctx, UserLibraryService_UnassignBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLibraryServiceClient) ListUserBooks(ctx context.Context, in *ListUserBooksRequest, opts ...grpc.CallOption) (*ListUserBooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserBooksResponse)
	err := c.cc.Invoke(ctx, UserLibraryService_ListUserBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserLibraryServiceServer is the server API for UserLibraryService service.
// All implementations must embed UnimplementedUserLibraryServiceServer
// for forward compatibility.
//
// Сервис
type UserLibraryServiceServer interface {
	AssignBook(context.Context, *AssignBookRequest) (*AssignBookResponse, error)
	UnassignBook(context.Context, *UnassignBookRequest) (*UnassignBookResponse, error)
	ListUserBooks(context.Context, *ListUserBooksRequest) (*ListUserBooksResponse, error)
	mustEmbedUnimplementedUserLibraryServiceServer()
}

// UnimplementedUserLibraryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserLibraryServiceServer struct{}

func (UnimplementedUserLibraryServiceServer) AssignBook(context.Context, *AssignBookRequest) (*AssignBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignBook not implemented")
}
func (UnimplementedUserLibraryServiceServer) UnassignBook(context.Context, *UnassignBookRequest) (*UnassignBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignBook not implemented")
}
func (UnimplementedUserLibraryServiceServer) ListUserBooks(context.Context, *ListUserBooksRequest) (*ListUserBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserBooks not implemented")
}
func (UnimplementedUserLibraryServiceServer) mustEmbedUnimplementedUserLibraryServiceServer() {}
func (UnimplementedUserLibraryServiceServer) testEmbeddedByValue()                            {}

// UnsafeUserLibraryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserLibraryServiceServer will
// result in compilation errors.
type UnsafeUserLibraryServiceServer interface {
	mustEmbedUnimplementedUserLibraryServiceServer()
}

func RegisterUserLibraryServiceServer(s grpc.ServiceRegistrar, srv UserLibraryServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserLibraryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserLibraryService_ServiceDesc, srv)
}

func _UserLibraryService_AssignBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLibraryServiceServer).AssignBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserLibraryService_AssignBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLibraryServiceServer).AssignBook(ctx, req.(*AssignBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLibraryService_UnassignBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLibraryServiceServer).UnassignBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserLibraryService_UnassignBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLibraryServiceServer).UnassignBook(ctx, req.(*UnassignBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLibraryService_ListUserBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLibraryServiceServer).ListUserBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserLibraryService_ListUserBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLibraryServiceServer).ListUserBooks(ctx, req.(*ListUserBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserLibraryService_ServiceDesc is the grpc.ServiceDesc for UserLibraryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserLibraryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userlibrary.UserLibraryService",
	HandlerType: (*UserLibraryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignBook",
			Handler:    _UserLibraryService_AssignBook_Handler,
		},
		{
			MethodName: "UnassignBook",
			Handler:    _UserLibraryService_UnassignBook_Handler,
		},
		{
			MethodName: "ListUserBooks",
			Handler:    _UserLibraryService_ListUserBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userlibrary.proto",
}
